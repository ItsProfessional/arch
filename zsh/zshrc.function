# interactive shell invoked functions go here

# latest systemd core
function lcd() {
	local PID=$(coredumpctl -1 | grep present | awk '{ print $5 }')
	if [ -n "${PID}" ]; then
		coredumpctl gdb "${PID}"
	fi
}

function vimdiff() {
	vi -d $@
}

function mnt() {
	if [ ${#} -ne 1 ]; then
		echo "Usage: ${FUNCNAME} <block device>" >&2
		return 1
	fi
	udisksctl mount -b "${1}"
	echo "${1}" > /tmp/lastmntd
	cd "$(findmnt -n -o TARGET ${1})"
}

function umnt() {
	if [ ${#} -gt 1 ]; then
		echo "Usage: ${FUNCNAME} [block device]" >&2
		return 1
	fi
	sync
	cd
	if [ -f /tmp/lastmntd ]; then
		udisksctl unmount -b "$(cat /tmp/lastmntd)"
	else
		udisksctl unmount -b "${1}"
	fi
}

function remote_env_setup() {
	TERM_PREV="${TERM}"
	TERM=$(underlyingterm)
	if [ -n "${TMUX}" ]; then
		tmux set prefix None
	fi
}

function remote_env_teardown() {
	if [ -n "${TMUX}" ]; then
		tmux set -u prefix
	fi
	TERM="${TERM_PREV}"
	unset TERM_PREV
}

function ssh() {
	remote_env_setup
	$(whence -p ssh) "${@}"
	remote_env_teardown
}

function su() {
	remote_env_setup
	$(whence -p su) "${@}"
	remote_env_teardown
}

function sudo() {
	remote_env_setup
	$(whence -p sudo) "${@}"
	remote_env_teardown
}

function sshl_kill() {
	pkill -e -f "lemonade server"
	pkill -e -f "ssh.*${1}"
}

function sshl_print() {
	pgrep -a -f "lemonade server"
	pgrep -a -f "ssh.*${1}"
}

function sshl() {
	# use default remote and local port so that we do not need to reconfigure nvim
	local PORT_REMOTE=2489
	local PORT_LOCAL=2489
	local LEM_SSH_ARGS="-f -N -R ${PORT_REMOTE}:127.0.0.1:${PORT_LOCAL}"

	case "${1}" in
		"-k")
			sshl_kill "${LEM_SSH_ARGS}"
			return 0
			;;
		"-s")
			sshl_print "${LEM_SSH_ARGS}"
			return 0
			;;
	esac

	pgrep -a -f "lemonade server"
	if [ "${?}" -ne 0 ]; then
		echo "starting lemonade server"
		lemonade server --port=${PORT_LOCAL} --allow="127.0.0.1,::1" --log-level=2 > /tmp/lemonade.log 2>&1 &!
		pgrep -a -f "lemonade server"
		if [ "${?}" -ne 0 ]; then
			cat /tmp/lemonade.log
			sshl_kill "${LEM_SSH_ARGS}"
			return 1
		fi
	fi

	pgrep -a -f "ssh.*${LEM_SSH_ARGS}"
	local NUM_SSH=$(pgrep -c -f "ssh.*${LEM_SSH_ARGS}")
	if [ "${NUM_SSH}" -ne 1 ]; then
		echo "starting ssh"
		if [ "${NUM_SSH}" -gt 1 ]; then
			pkill -e -f "ssh.*${LEM_SSH_ARGS}"
		fi
		eval "$(whence -p ssh) ${1} ${LEM_SSH_ARGS}"
		if [ "${?}" -ne 0 ]; then
			sshl_kill "${LEM_SSH_ARGS}"
			return 1
		fi
		pgrep -a -f "ssh.*${LEM_SSH_ARGS}"
	fi

	ssh ${@}
}

function smt() {
	export SWAYSOCK=$(ls -tr ${XDG_RUNTIME_DIR}/sway-ipc*sock | tail -1)
	swaymsg -t ${@}
}

function pyenv-init() {
	if [ "$(whence pyenv)" ]; then
		export PYENV_ROOT=$HOME/.pyenv
		eval "$(pyenv init -)"
	fi
}

function nvt-dev() {
	nvim -nu "/tmp/nvt-dev.lua" ${@}
}

function nvt-dev-edit() {
	vi "/tmp/nvt-dev.lua"
}

function nvt-dev-clear() {
	rm -rf /tmp/nvt-dev
}

function nvt-dev-init() {
	if [ -z "${1}" ]; then
		EXT="dev"
	else
		EXT="${1}"
	fi
	SRC="${XDG_DATA_HOME}/nvim/vundle/nvim-tree.lua.${EXT}"
	INIT="/tmp/nvt-dev.lua"

	rm -rf "${INIT}" /tmp/nvt-dev

	grep -B 1000 "MODIFY NVIM-TREE SETTINGS" ${SRC}/.github/ISSUE_TEMPLATE/nvt-min.lua > "${INIT}"

	sed -i -e "s#kyazdani42/nvim-tree.lua#${SRC}#g ; s/nvt-min/nvt-dev/g" "${INIT}"

	cat << EOF >> "${INIT}"
_G.setup = function()
  require("nvim-tree").setup {
EOF

	sed -n -e "/BEGIN_DEFAULT_OPTS/,/END_DEFAULT_OPTS/{ /BEGIN_DEFAULT_OPTS/d; /END_DEFAULT_OPTS/d; p; }" "${SRC}/lua/nvim-tree.lua" | sed -e "s/^  /    /" >> "${INIT}"

cat << EOF >> "${INIT}"
  }
end
vim.api.nvim_set_keymap('n', ';', ':', {})
vim.api.nvim_set_keymap('n', '<Space>;', ':NvimTreeRefresh<CR>', {})
vim.api.nvim_set_keymap('n', '<Space>a', ':NvimTreeFindFile<CR>', {})
vim.api.nvim_set_keymap('n', '<Space>,', ':NvimTreeOpen<CR>', {})
vim.api.nvim_set_keymap('n', '<Space>o', ':wincmd p<CR>', {})
vim.api.nvim_set_keymap('n', '<Space>\'', ':NvimTreeClose<CR>', {})
EOF

	unset SRC
	unset INIT
}

