# non-interactive shell invoked functions go here

# don't evaluate git ps1 e.g.
#
# typeset -a NO_GIT_PS1=(
# "${HOME}/src/cmocka"
# "${HOME}/src/linux"
# )
if [ -f "${HOME}/.nogitps1" ]; then
	. "${HOME}/.nogitps1"
fi

# terminal title
function printtermtitle() {

	# lazy load __git_ps1
	if ! type __git_ps1 > /dev/null 2>&1; then
		if [ -f "/opt/homebrew/etc/bash_completion.d/git-prompt.sh" ]; then
			git_ps1_script="/opt/homebrew/etc/bash_completion.d/git-prompt.sh"
		elif [ -f "/usr/share/git/completion/git-prompt.sh" ]; then
			git_ps1_script="/usr/share/git/completion/git-prompt.sh"
		fi
		if [ -f "${git_ps1_script}" ]; then
			GIT_PS1_SHOWDIRTYSTATE="true"
			GIT_PS1_SHOWSTASHSTATE="true"
			GIT_PS1_SHOWUPSTREAM="auto"
			. /opt/homebrew/etc/bash_completion.d/git-prompt.sh
		else
			function __git_ps1() { : }
		fi
		unset git_ps1_script
	fi

	if [ -n "${SSH_CONNECTION}" -o "${USER}" = "root" ]; then
		print -n "${HOST}  "
	fi

	# don't include __git_ps1 in the print lest it be prompt substituted
	print -Pn "%~ "

	# obey ~/.nogitps1
	if [ "${#NO_GIT_PS1}" -gt 0 ]; then
		for d ("${NO_GIT_PS1[@]}"); do
			if [[ "${PWD}" =~ "^${d}" ]]; then
				return
			fi
		done
	fi
	__git_ps1
}

# print git ps1, current branch, upstream URL
function gs() {
	local git_ps1=$(__git_ps1 2>/dev/null)
	[ -n "${git_ps1}" ] && print "${git_ps1}"

	local branch_local=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
	[ -n "${branch_local}" ] && print "\n${branch_local}"

	local branch_remote=$(git rev-parse --abbrev-ref --symbolic-full-name @{upstream} 2>/dev/null)
	if [ -n "${branch_remote}" ]; then
		print "${branch_remote}"
		local url=$(git remote get-url ${branch_remote/\/*/})
		if [ -n "${url}" ]; then
			print "\n${url}\n${${(S)url/*:/}/\/*/}"
		fi
	fi
}

# set branch upstream to $1
function gu {
	if [ ${#} -ne 1 ]; then
		echo "Usage: gu <name>" >&2
		return 1
	fi
	branch_local=$(git rev-parse --abbrev-ref HEAD)
	git branch --set-upstream-to="${1}/${branch_local}" "${branch_local}"
}

# search parents / .config
function stylua {
	local ARGS=""

	if [ -z "${@[(r)--search-parent-directories]}" -a -z "${@[(r)-s]}" ]; then
		ARGS="--search-parent-directories"
		$(whence -p stylua)  "${@}"
	fi

	$(whence -p stylua) "${ARGS}" "${@}"
}
