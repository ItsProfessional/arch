#!/bin/sh

# Gives a color $1/255 % along HSV
# Who knows what happens when $1 is outside 0-255
# Echoes "$red $green $blue" where
# $red $green and $blue are integers
# ranging between 0 and 255 inclusive
rainbow_color()
{ 
	let h=$1/43
	let f=$1-43*$h
	let t=$f*255/43
	let q=255-t

	if [ $h -eq 0 ]
	then
		echo "255 $t 0"
	elif [ $h -eq 1 ]
	then
		echo "$q 255 0"
	elif [ $h -eq 2 ]
	then
		echo "0 255 $t"
	elif [ $h -eq 3 ]
	then
		echo "0 $q 255"
	elif [ $h -eq 4 ]
	then
		echo "$t 0 255"
	elif [ $h -eq 5 ]
	then
		echo "255 0 $q"
	else
		# execution should never reach here
		echo "0 0 0"
	fi
}

rgb_cell() {
	printf "\033[48;2;%d;%d;%dm \033[m" "$1" "$2" "$3"
}

rgb_block() {
	printf "\033[48;2;%d;%d;%dm          \033[m" "$1" "$2" "$3"
}

ansi_block() {
	for i in $(seq $1 $(( $1 + 7))); do
		printf "\033[%d;%dm%-10s\033[m" "$2" "$i" "$3"
	done
	printf "\n"
}

# red spectrum
for i in $(seq 0 1 127); do
	rgb_cell $i 0 0
done
printf "\n"
for i in $(seq 255 -1 128); do
	rgb_cell $i 0 0
done
printf "\n\n"

# green spectrum
for i in $(seq 0 1 127); do
	rgb_cell 0 $i 0
done
printf "\n"
for i in $(seq 255 -1 128); do
	rgb_cell 0 $i 0
done
printf "\n\n"

# blue spectrum
for i in $(seq 0 1 127); do
	rgb_cell 0 0 $i
done
printf "\n"
for i in $(seq 255 -1 128); do
	rgb_cell 0 0 $i
done
printf "\n\n"

# rainbow spectrum
for i in $(seq 0 1 127); do
	rgb_cell $(rainbow_color $i)
done
printf "\n"
for i in $(seq 255 -1 128); do
	rgb_cell $(rainbow_color $i)
done
printf "\n\n"

# xterm
rgb_block 0 0 0
rgb_block 205 0 0
rgb_block 0 205 0
rgb_block 205 205 0
rgb_block 0 0 238
rgb_block 205 0 205
rgb_block 0 205 205
rgb_block 229 229 229
printf "\n"
rgb_block 127 127 127
rgb_block 255 0 0
rgb_block 0 255 0
rgb_block 255 255 0
rgb_block 92 92 255
rgb_block 255 0 255
rgb_block 0 255 255
rgb_block 255 255 255
printf "\n\n"

# base16-default-dark
rgb_block 0x18 0x18 0x18
rgb_block 0xab 0x46 0x42
rgb_block 0xa1 0xb5 0x6c
rgb_block 0xf7 0xca 0x88
rgb_block 0x7c 0xaf 0xc2
rgb_block 0xba 0x8b 0xaf
rgb_block 0x86 0xc1 0xb9
rgb_block 0xd8 0xd8 0xd8
printf "\n"
rgb_block 0x58 0x58 0x58
rgb_block 0xdc 0x96 0x56
rgb_block 0x28 0x28 0x28
rgb_block 0x38 0x38 0x38
rgb_block 0xb8 0xb8 0xb8
rgb_block 0xe8 0xe8 0xe8
rgb_block 0xa1 0x69 0x46
rgb_block 0xf8 0xf8 0xf8
printf "\n\n"

# ansi
ansi_block 40 0 ""
ansi_block 100 0 ""
printf "\n"
ansi_block 30 0 "normal"
ansi_block 90 0 "normal"
ansi_block 30 1 "bold"
ansi_block 90 1 "bold"
ansi_block 30 2 "faint"
ansi_block 90 2 "faint"
ansi_block 30 3 "italic"
ansi_block 90 3 "italic"
ansi_block 30 4 "underline"
ansi_block 90 4 "underline"
ansi_block 30 5 "s. blink"
ansi_block 90 5 "s. blink"
ansi_block 30 6 "f. blink"
ansi_block 90 6 "f. blink"
ansi_block 30 7 "reverse"
ansi_block 90 7 "reverse"
ansi_block 30 8 "conceal"
ansi_block 90 8 "conceal"
ansi_block 30 9 "cross"
ansi_block 90 9 "cross"
