#!/bin/sh

# Gives a color $1/255 % along HSV
# Who knows what happens when $1 is outside 0-255
# Echoes "$red $green $blue" where
# $red $green and $blue are integers
# ranging between 0 and 255 inclusive
rainbow_color()
{ 
	let h=$1/43
	let f=$1-43*$h
	let t=$f*255/43
	let q=255-t

	if [ $h -eq 0 ]
	then
		echo "255 $t 0"
	elif [ $h -eq 1 ]
	then
		echo "$q 255 0"
	elif [ $h -eq 2 ]
	then
		echo "0 255 $t"
	elif [ $h -eq 3 ]
	then
		echo "0 $q 255"
	elif [ $h -eq 4 ]
	then
		echo "$t 0 255"
	elif [ $h -eq 5 ]
	then
		echo "255 0 $q"
	else
		# execution should never reach here
		echo "0 0 0"
	fi
}

rgb_cell() {
	printf "\033[48;2;%d;%d;%dm \033[m" "$1" "$2" "$3"
}

rgb_block() {
	printf "\033[48;2;%d;%d;%dm          \033[m" "$1" "$2" "$3"
}

ansi_block() {
	printf "\033[m%2s\033[%dm        \033[m" "$2" "$1"
}

ansi_blocks() {
	for i in $(seq $1 $(( $1 + 7))); do
		printf "\033[%d;%dm%-10s\033[m" "$2" "$i" "$3"
	done
	printf "\n"
}

# dwm
rgb_block 34 34 34
rgb_block 68 68 68
rgb_block 187 187 187
rgb_block 238 238 238
rgb_block 0 85 119
printf "\n\n"

if [ "${1}" = "-f" ]; then

	# red spectrum
	for i in $(seq 0 1 127); do
		rgb_cell $i 0 0
	done
	printf "\n"
	for i in $(seq 255 -1 128); do
		rgb_cell $i 0 0
	done
	printf "\n\n"

	# green spectrum
	for i in $(seq 0 1 127); do
		rgb_cell 0 $i 0
	done
	printf "\n"
	for i in $(seq 255 -1 128); do
		rgb_cell 0 $i 0
	done
	printf "\n\n"

	# blue spectrum
	for i in $(seq 0 1 127); do
		rgb_cell 0 0 $i
	done
	printf "\n"
	for i in $(seq 255 -1 128); do
		rgb_cell 0 0 $i
	done
	printf "\n\n"

	# rainbow spectrum
	for i in $(seq 0 1 127); do
		rgb_cell $(rainbow_color $i)
	done
	printf "\n"
	for i in $(seq 255 -1 128); do
		rgb_cell $(rainbow_color $i)
	done
	printf "\n\n"
else
	# truncated rainbow spectrum
	for i in $(seq 0 1 79); do
		rgb_cell $(rainbow_color $i)
	done
	printf "\n\n"
fi

# xterm
rgb_block 0 0 0
rgb_block 205 0 0
rgb_block 0 205 0
rgb_block 205 205 0
rgb_block 0 0 238
rgb_block 205 0 205
rgb_block 0 205 205
rgb_block 229 229 229
printf "\n"
rgb_block 127 127 127
rgb_block 255 0 0
rgb_block 0 255 0
rgb_block 255 255 0
rgb_block 92 92 255
rgb_block 255 0 255
rgb_block 0 255 255
rgb_block 255 255 255
printf "\n\n"

# ansi
ansi_block 40 "00"
ansi_block 41 "08"
ansi_block 42 "0B"
ansi_block 43 "0A"
ansi_block 44 "0D"
ansi_block 45 "0E"
ansi_block 46 "0C"
ansi_block 47 "05"
printf "\n"
ansi_block 100 "03"
ansi_block 101 "09"
ansi_block 102 "01"
ansi_block 103 "02"
ansi_block 104 "04"
ansi_block 105 "06"
ansi_block 106 "0F"
ansi_block 107 "07"
printf "\n"
ansi_blocks 30 0 "normal"
ansi_blocks 90 0 "normal"
ansi_blocks 30 1 "bold"
ansi_blocks 90 1 "bold"
ansi_blocks 30 3 "italic"
ansi_blocks 90 3 "italic"
if [ "${1}" = "-f" ]; then
	ansi_blocks 30 2 "faint"
	ansi_blocks 90 2 "faint"
	ansi_blocks 30 4 "underline"
	ansi_blocks 90 4 "underline"
	ansi_blocks 30 5 "s. blink"
	ansi_blocks 90 5 "s. blink"
	ansi_blocks 30 6 "f. blink"
	ansi_blocks 90 6 "f. blink"
	ansi_blocks 30 7 "reverse"
	ansi_blocks 90 7 "reverse"
	ansi_blocks 30 8 "conceal"
	ansi_blocks 90 8 "conceal"
	ansi_blocks 30 9 "cross"
	ansi_blocks 90 9 "cross"
fi
