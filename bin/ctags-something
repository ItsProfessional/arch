#!/bin/sh

# Great idea: https://www.topbug.net/blog/2012/03/17/generate-ctags-files-for-c-slash-c-plus-plus-source-files-and-all-of-their-included-header-files/

function usage() {
	cat << END_USAGE
Generates tags for a C or C++ project and everything external that it includes.

Identifies all includes by invoking gcc/g++ with -M and the supplied flags.
ctags generates tags by processing all these files.

Prototype tags are not generated for project sources.

Invoke from a makefile e.g.
  ctags:
    ctags-c   \$(CFLAGS)   \$(CPPFLAGS) --project-src \$(SRC_C)   \$(INC_H)
    ctags-c++ \$(CXXFLAGS) \$(CPPFLAGS) --project-src \$(SRC_CXX) \$(INC_H) --append

Or directly e.g.
  ctags-c++ -I /usr/include/libevdev-1.0 --project-src src/main.cpp
END_USAGE
	exit 1
}

if [ $# -eq 0 ]; then
	usage
fi

# pick compiler based on invocation
ARGS="${@}"
case "$(basename ${0})" in
	ctags-c)
		COMPILER=gcc
		;;
	ctags-c++)
		COMPILER=g++
		;;
	*)
		usage
		;;
esac

rm -f /tmp/$(basename ${0}).project
rm -f /tmp/$(basename ${0}).include

# separate compiler args and project files
COMPILER_OPTS=""
PROJECT_SRC_FOUND=0
while [ -n "${1}" ]; do
	if [ "${1}" = "--project-src" ]; then
		PROJECT_SRC_FOUND=1
	elif [ "${1}" = "--append" ]; then
		APND="-a"
	else
		if [ "${PROJECT_SRC_FOUND}" -eq 1 ]; then
			echo "${1}" >> /tmp/$(basename ${0}).project
		else
			COMPILER_OPTS="${COMPILER_OPTS} $1"
		fi
	fi
	shift
done
if [ "${PROJECT_SRC_FOUND}" -eq 0 ]; then
	usage
fi

# build the includes list
${COMPILER} -M ${COMPILER_OPTS} $(cat /tmp/$(basename ${0}).project) \
	| sed -e 's/[\\ ]/\n/g'  \
	| sed -e '/^$/d' \
	| sed -e '/\.o:[ \t]*$/d' \
	| sort \
	| uniq \
	| grep -v -f /tmp/$(basename ${0}).project \
	> /tmp/$(basename ${0}).includes

# always generate with C++ as many system headers are c++
ctags ${APND} --languages=C,C++ --fields=+S --c++-kinds=+p --c-kinds=+p -L /tmp/$(basename ${0}).includes
ctags -a      --languages=C,C++ --fields=+S                             -L /tmp/$(basename ${0}).project

